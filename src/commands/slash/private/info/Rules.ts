import Colors from '@constants/Colors'
import Reply from '@helpers/Reply'
import Client from '@structures/Client'
import ChatCommand from '@structures/commands/ChatCommand'
import { AccessType, CommandType } from '@structures/commands/Command'
import { ActionRowBuilder, ApplicationCommandType, ChatInputCommandInteraction, MessageActionRowComponentBuilder, StringSelectMenuBuilder, StringSelectMenuInteraction } from 'discord.js'

export default class RulesCommand extends ChatCommand {
  constructor(client: Client) {
    super(
      client,
      {
        permissions: [],
        access: AccessType.Private,
        type: CommandType.Private,
        status: true
      },
      {
        name: 'rules',
        description: 'Send server rules',
        type: ApplicationCommandType.ChatInput,
        defaultMemberPermissions: 'Administrator',
        dmPermission: false
      }
    )
  }

  public static image = [
    'https://i.imgur.com/wZX8XWS.png',
    'https://i.imgur.com/nRkyQU0.png',
    'https://i.imgur.com/D2adSR1.png'
  ]
  public static title = ['Community rules', '–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', '’ç’•÷Ä’æ’•÷Ä’´ ’Ø’°’∂’∏’∂’∂’•÷Ä’®']
  public static fields = [
    [
      {
        name: 'Attitude',
        value: `Please be polite and respectful towards people in the server. Don't be rude or mean to anyone.`,
        inline: false
      },
      {
        name: 'Forbidden topics',
        value: 'Prohibited topics, such as politics, religion, discrimination, or other sensitive content, are strictly off-limits in the server.',
        inline: false
      },
      {
        name: 'Advertisement',
        value: 'Please refrain from promoting other Discord servers, websites, or products without permission from the server moderators. Spamming or excessive self-promotion is not allowed.',
        inline: false
      },
      {
        name: 'Offensive content',
        value: 'Please do not share any inappropriate or offensive content, including sexually explicit images or videos.',
        inline: false
      },
      {
        name: 'Moderation',
        value: 'If the server moderators find that a member has violated any of these rules they may take corresponding action.',
        inline: false
      }
    ],
    [
      {
        name: '–û—Ç–Ω–æ—à–µ–Ω–∏–µ',
        value: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –ª—é–¥—è–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ù–µ –±—É–¥—å –≥—Ä—É–±—ã–º –∏–ª–∏ –∑–ª—ã–º –Ω–∏ —Å –∫–µ–º',
        inline: false
      },
      {
        name: '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        value: '–ó–∞–ø–æ–≤–µ–¥–Ω—ã–µ —Ç–µ–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
        inline: false
      },
      {
        name: '–†–µ–∫–ª–∞–º–∞',
        value: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç —Ä–µ–∫–ª–∞–º—ã –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø–∞–º –∏–ª–∏ —á—Ä–µ–∑–º–µ—Ä–Ω–∞—è —Å–∞–º–æ—Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.',
        inline: false
      },
      {
        name: '–û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        value: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–º –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.',
        inline: false
      },
      {
        name: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
        value: '–ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–∞—Ç, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—Ä—É—à–∏–ª –∫–∞–∫–æ–µ-–ª–∏–±–æ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –∏–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–Ω–æ—Å—è—â–µ–µ —É—â–µ—Ä–± —Å–æ–æ–±—â–µ—Å—Ç–≤—É —Å–µ—Ä–≤–µ—Ä–∞, –æ–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.',
        inline: false
      }
    ],
    [
      {
        name: '’é’•÷Ä’°’¢’•÷Ä’¥’∏÷Ç’∂÷Ñ',
        value: '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¨’´’∂’•’¨ ÷Ñ’°’≤’°÷Ñ’°’æ’°÷Ä’´ ÷á ’∞’°÷Ä’£’°’¨’´÷Å ’Ω’•÷Ä’æ’•÷Ä’´ ’°’∂’§’°’¥’∂’•÷Ä’´ ’∂’Ø’°’ø’¥’°’¥’¢: ’Ñ’´ ’•’≤’•÷Ñ ’Ø’∏’∫’´’ø ’Ø’°’¥ ’π’°÷Ä ’∏’π ’∏÷Ñ’´ ’∂’Ø’°’ø’¥’°’¥’¢÷â',
        inline: false
      },
      {
        name: '‘±÷Ä’£’•’¨’æ’°’Æ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂',
        value: '‘±÷Ä’£’•’¨’æ’°’Æ ’ß ÷Ñ’∂’∂’°÷Ä’Ø’•’¨ ’©’•’¥’°’∂’•÷Ä, ’´’∂’π’∫’´’Ω’´÷Ñ ’•’∂ ÷Ñ’°’≤’°÷Ñ’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®, ’Ø÷Ä’∏’∂’®, ’≠’ø÷Ä’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ø’°’¥ ’°’µ’¨ ’¶’£’°’µ’∏÷Ç’∂ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂ ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏’≤ ’≠’∏’Ω’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä:',
        inline: false
      },
      {
        name: '‘≥’∏’æ’°’¶’§',
        value: '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¶’•÷Ä’Æ ’¥’∂’°’¨ ’°’µ’¨ ’Ω’•÷Ä’æ’•÷Ä’∂’•÷Ä’´, ’Ø’°’µ÷Ñ’•÷Ä’´ ’Ø’°’¥ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’∏’æ’°’¶’§’´÷Å’ù ’°’º’°’∂÷Å ’Ω’•÷Ä’æ’•÷Ä’´ ’¥’∏’§’•÷Ä’°’ø’∏÷Ä’∂’•÷Ä’´ ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’°’∂: ’ç’∫’°’¥’® ’Ø’°’¥ ’°’æ’•’¨’∏÷Ä’§ ’´’∂÷Ñ’∂’°’£’∏’æ’°’¶’§’∏÷Ç’¥’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß:',
        inline: false
      },
      {
        name: '’é’´÷Ä’°’æ’∏÷Ä’°’Ø’°’∂ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂',
        value: '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´ ’ø’°÷Ä’°’Æ’•÷Ñ ’°’∂’∫’°’ø’∑’°’≥, ’æ’´÷Ä’°’æ’∏÷Ä’°’Ø’°’∂ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’°’∂ ’Ø’°’¥ ’Ω’•’º’°’Ø’°’∂ ’¢’∂’∏÷Ç’µ’©’´ ’∂’µ’∏÷Ç’©’•÷Ä, ’∫’°’ø’Ø’•÷Ä’∂’•÷Ä ’Ø’°’¥ ’ø’•’Ω’°’∂’µ’∏÷Ç’©’•÷Ä:',
        inline: false
      },
      {
        name: '’Ñ’∏’§’•÷Ä’°÷Å’´’µ’°',
        value: '‘µ’©’• ‚Äã‚Äã’Ω’•÷Ä’æ’•÷Ä’´ ’¥’∏’§’•÷Ä’°’ø’∏÷Ä’∂’•÷Ä’® ’£’ø’∂’∏÷Ç’¥ ’•’∂, ’∏÷Ä ’°’∂’§’°’¥’® ’≠’°’≠’ø’•’¨ ’ß ’°’µ’Ω ’Ø’°’∂’∏’∂’∂’•÷Ä’´÷Å ’∏÷Ä÷á’ß ’¥’•’Ø’® ’Ø’°’¥ ’æ’°÷Ä÷Ñ’°’£’´’Æ ’ß ’§÷Ä’Ω÷á’∏÷Ä’•’¨, ’∏÷Ä’® ’æ’∂’°’Ω’°’Ø’°÷Ä ’ß ’Ω’•÷Ä’æ’•÷Ä’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂, ’∂÷Ä’°’∂÷Ñ ’Ø’°÷Ä’∏’≤ ’•’∂ ’´÷Ä’•’∂÷Å ’∞’°’µ’•÷Å’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’¥’´’ª’∏÷Å’∂’•÷Ä ’±’•’º’∂’°÷Ä’Ø’•’¨:',
        inline: false
      }
    ]
  ]

  public execute(client: Client, interaction: ChatInputCommandInteraction<'cached'>) {
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('rules')
      .setPlaceholder('Select a language')
      .setMaxValues(1)
      .setMinValues(1)
      .setOptions([
        {
          label: 'English',
          value: 'gb',
          description: 'Translate to English',
          emoji: 'üá¨üáß',
          default: true
        },
        {
          label: 'Russian',
          value: 'ru',
          description: 'Translate to Russian',
          emoji: 'üá∑üá∫'
        },
        {
          label: 'Armenian',
          value: 'am',
          description: 'Translate to Armenian',
          emoji: 'üá¶üá≤'
        }
      ])

    const actionRow = new ActionRowBuilder<MessageActionRowComponentBuilder>()
      .addComponents(selectMenu)

    Reply.sendMessage({
      client,
      color: Colors.primary,
      channel: interaction.channel?.id || '',
      fields: RulesCommand.fields[0],
      title: RulesCommand.title[0],
      image: RulesCommand.image[0],
      components: [actionRow],
    })

    Reply.reply({
      client,
      interaction,
      content: 'Successfully sent the rules',
    })
  }

  public static select(client: Client, interaction: StringSelectMenuInteraction<'cached'>) {
    const index = ['gb', 'ru', 'am'].indexOf(interaction.values[0])

    Reply.reply({
      client,
      interaction,
      color: Colors.primary,
      fields: RulesCommand.fields[index],
      title: RulesCommand.title[index],
      image: RulesCommand.image[index],
      ephemeral: true,
      update: false
    })
  }
}